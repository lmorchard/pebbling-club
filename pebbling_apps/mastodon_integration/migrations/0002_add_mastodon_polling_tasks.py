# Generated by Django 5.1.6 on 2025-06-30 03:59

from django.db import migrations


def create_mastodon_polling_schedules(apps, schema_editor):
    """Create periodic tasks for Mastodon timeline polling."""
    PeriodicTask = apps.get_model("django_celery_beat", "PeriodicTask")
    IntervalSchedule = apps.get_model("django_celery_beat", "IntervalSchedule")

    # Create or get 1 minute interval for timeline polling
    timeline_schedule, _ = IntervalSchedule.objects.get_or_create(
        every=1,
        period="minutes",
    )

    # Create the periodic task for polling all timelines
    PeriodicTask.objects.get_or_create(
        name="Poll All Mastodon Timelines",
        defaults={
            "task": "poll_all_mastodon_timelines",
            "interval": timeline_schedule,
            "enabled": True,
            "description": "Polls all active Mastodon timelines for new content",
        },
    )

    # Create or get 5 minute interval for cleanup tasks
    cleanup_schedule, _ = IntervalSchedule.objects.get_or_create(
        every=5,
        period="minutes",
    )

    # Create the periodic task for cleaning up failed timelines
    PeriodicTask.objects.get_or_create(
        name="Cleanup Failed Mastodon Timelines",
        defaults={
            "task": "cleanup_failed_mastodon_timelines",
            "interval": cleanup_schedule,
            "enabled": True,
            "description": "Disables Mastodon timelines that have exceeded failure threshold",
        },
    )

    # Create or get 30 minute interval for connection testing
    test_schedule, _ = IntervalSchedule.objects.get_or_create(
        every=30,
        period="minutes",
    )

    # Create the periodic task for testing connections
    PeriodicTask.objects.get_or_create(
        name="Test Mastodon Connections",
        defaults={
            "task": "test_mastodon_connections",
            "interval": test_schedule,
            "enabled": True,
            "description": "Tests all Mastodon account connections and disables failed ones",
        },
    )


def remove_mastodon_polling_schedules(apps, schema_editor):
    """Remove Mastodon polling periodic tasks."""
    PeriodicTask = apps.get_model("django_celery_beat", "PeriodicTask")

    # Remove all Mastodon-related periodic tasks
    task_names = [
        "Poll All Mastodon Timelines",
        "Cleanup Failed Mastodon Timelines",
        "Test Mastodon Connections",
    ]

    for task_name in task_names:
        PeriodicTask.objects.filter(name=task_name).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("mastodon_integration", "0001_initial"),
        ("django_celery_beat", "0018_improve_crontab_helptext"),
    ]

    operations = [
        migrations.RunPython(
            create_mastodon_polling_schedules,
            remove_mastodon_polling_schedules,
        ),
    ]
