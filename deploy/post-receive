#!/bin/bash
# Git post-receive hook for automatic Docker deployment
# This hook runs after receiving a push and updates the Docker containers

set -e  # Exit on error

# Configuration
DEPLOY_DIR="/opt/pebbling-club"
COMPOSE_FILE="docker/compose/docker-compose.yml"
BRANCH="main"  # Change this to your deployment branch
LOG_FILE="/var/log/pebbling-club-deploy.log"

# Function to log messages
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Function to send notification (optional - configure as needed)
notify() {
    # Example: Send to a webhook, email, or Slack
    # curl -X POST -H 'Content-type: application/json' \
    #      --data "{\"text\":\"$1\"}" \
    #      YOUR_WEBHOOK_URL
    echo "$1"
}

log "=== Starting deployment ==="

# Read the branch being pushed
while read oldrev newrev refname; do
    branch=$(git rev-parse --symbolic --abbrev-ref "$refname")
    
    if [ "$branch" = "$BRANCH" ]; then
        log "Detected push to $branch branch"
        
        # Change to deployment directory
        cd "$DEPLOY_DIR"
        
        # Store current commit for rollback
        OLD_COMMIT=$(git rev-parse HEAD)
        
        # Fetch and checkout the latest code
        log "Updating code..."
        git fetch origin
        git reset --hard "origin/$branch"
        
        # Get new commit info
        NEW_COMMIT=$(git rev-parse HEAD)
        COMMIT_MSG=$(git log -1 --pretty=%B)
        AUTHOR=$(git log -1 --pretty=%an)
        
        log "Updated from $OLD_COMMIT to $NEW_COMMIT"
        log "Commit by $AUTHOR: $COMMIT_MSG"
        
        # Check if docker-compose.yml changed
        if git diff --name-only "$OLD_COMMIT" "$NEW_COMMIT" | grep -q "$COMPOSE_FILE"; then
            log "docker-compose.yml changed - rebuilding all containers"
            REBUILD_ALL=true
        else
            REBUILD_ALL=false
        fi
        
        # Check if requirements changed
        if git diff --name-only "$OLD_COMMIT" "$NEW_COMMIT" | grep -E "(requirements\.txt|pyproject\.toml|package\.json)" > /dev/null; then
            log "Dependencies changed - forcing rebuild"
            REBUILD_ALL=true
        fi
        
        # Pull new images
        log "Pulling Docker images..."
        docker-compose -f "$COMPOSE_FILE" pull
        
        # Build containers
        if [ "$REBUILD_ALL" = true ]; then
            log "Building all containers..."
            docker-compose -f "$COMPOSE_FILE" build --no-cache
        else
            log "Building containers..."
            docker-compose -f "$COMPOSE_FILE" build
        fi
        
        # Run database migrations
        log "Running database migrations..."
        docker-compose -f "$COMPOSE_FILE" run --rm web python manage.py migrate --noinput
        
        # Collect static files
        log "Collecting static files..."
        docker-compose -f "$COMPOSE_FILE" run --rm web python manage.py collectstatic --noinput
        
        # Restart containers with zero downtime
        log "Restarting containers..."
        docker-compose -f "$COMPOSE_FILE" up -d --remove-orphans
        
        # Wait for services to be healthy
        log "Waiting for services to be healthy..."
        sleep 10
        
        # Check if services are running
        if docker-compose -f "$COMPOSE_FILE" ps | grep -q "Exit"; then
            log "ERROR: Some services failed to start!"
            
            # Rollback
            log "Rolling back to previous version..."
            git reset --hard "$OLD_COMMIT"
            docker-compose -f "$COMPOSE_FILE" up -d --force-recreate
            
            notify "❌ Deployment failed! Rolled back to $OLD_COMMIT"
            exit 1
        fi
        
        # Clean up old images
        log "Cleaning up old Docker images..."
        docker image prune -f
        
        log "=== Deployment completed successfully ==="
        notify "✅ Deployed $NEW_COMMIT by $AUTHOR"
        
    else
        log "Push to $branch branch ignored (not deployment branch)"
    fi
done